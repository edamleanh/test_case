import re

def filter_3_digit_numbers(input_file, output_file):
    """
    L·ªçc t·∫•t c·∫£ s·ªë c√≥ 3 ch·ªØ s·ªë t·ª´ file input v√† xu·∫•t ra file output
    Bao g·ªìm c·∫£ s·ªë tr√πng l·∫∑p
    """
    try:
        # ƒê·ªçc n·ªôi dung file input
        with open(input_file, 'r', encoding='utf-8') as file:
            content = file.read()
        
        # T√¨m t·∫•t c·∫£ s·ªë c√≥ ƒë√∫ng 3 ch·ªØ s·ªë
        # Pattern: \b\d{3}\b - t√¨m s·ªë c√≥ ƒë√∫ng 3 ch·ªØ s·ªë (word boundary)
        three_digit_numbers = re.findall(r'\b\d{3}\b', content)
        
        # Ghi k·∫øt qu·∫£ ra file output
        with open(output_file, 'w', encoding='utf-8') as file:
            for number in three_digit_numbers:
                file.write(number + '\n')
        
        # Th·ªëng k√™
        print(f"‚úÖ ƒê√£ l·ªçc xong!")
        print(f"üìÅ File input: {input_file}")
        print(f"üìÅ File output: {output_file}")
        print(f"üî¢ T·ªïng s·ªë c√≥ 3 ch·ªØ s·ªë t√¨m ƒë∆∞·ª£c: {len(three_digit_numbers)}")
        
        # ƒê·∫øm s·ªë unique
        unique_numbers = set(three_digit_numbers)
        print(f"üéØ S·ªë duy nh·∫•t: {len(unique_numbers)}")
        print(f"üîÑ S·ªë b·ªã tr√πng l·∫∑p: {len(three_digit_numbers) - len(unique_numbers)}")
        
        # Hi·ªÉn th·ªã m·ªôt s·ªë v√≠ d·ª•
        print(f"\nüìã M·ªôt s·ªë v√≠ d·ª• (10 s·ªë ƒë·∫ßu ti√™n):")
        for i, num in enumerate(three_digit_numbers[:10]):
            print(f"  {i+1}. {num}")
        
        if len(three_digit_numbers) > 10:
            print(f"  ... v√† {len(three_digit_numbers) - 10} s·ªë kh√°c")
            
    except FileNotFoundError:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {input_file}")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

if __name__ == "__main__":
    # ƒê∆∞·ªùng d·∫´n file
    input_file = "data.txt"
    output_file = "filtered_3_digit_numbers.txt"
    
    # Th·ª±c hi·ªán l·ªçc
    filter_3_digit_numbers(input_file, output_file)
